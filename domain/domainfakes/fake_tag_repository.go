// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeTagRepository struct {
	DeleteByIDStub        func(context.Context, model.Tag) error
	deleteByIDMutex       sync.RWMutex
	deleteByIDArgsForCall []struct {
		arg1 context.Context
		arg2 model.Tag
	}
	deleteByIDReturns struct {
		result1 error
	}
	deleteByIDReturnsOnCall map[int]struct {
		result1 error
	}
	FindAllByNamesStub        func(context.Context, []string) ([]model.Tag, error)
	findAllByNamesMutex       sync.RWMutex
	findAllByNamesArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	findAllByNamesReturns struct {
		result1 []model.Tag
		result2 error
	}
	findAllByNamesReturnsOnCall map[int]struct {
		result1 []model.Tag
		result2 error
	}
	FindByIDStub        func(context.Context, string) (model.Tag, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	findByIDReturns struct {
		result1 model.Tag
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 model.Tag
		result2 error
	}
	FindTagPopulerStub        func(context.Context, int64) ([]domain.FindTagPopulerResult, error)
	findTagPopulerMutex       sync.RWMutex
	findTagPopulerArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	findTagPopulerReturns struct {
		result1 []domain.FindTagPopulerResult
		result2 error
	}
	findTagPopulerReturnsOnCall map[int]struct {
		result1 []domain.FindTagPopulerResult
		result2 error
	}
	UpSertManyStub        func(context.Context, []string) error
	upSertManyMutex       sync.RWMutex
	upSertManyArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	upSertManyReturns struct {
		result1 error
	}
	upSertManyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTagRepository) DeleteByID(arg1 context.Context, arg2 model.Tag) error {
	fake.deleteByIDMutex.Lock()
	ret, specificReturn := fake.deleteByIDReturnsOnCall[len(fake.deleteByIDArgsForCall)]
	fake.deleteByIDArgsForCall = append(fake.deleteByIDArgsForCall, struct {
		arg1 context.Context
		arg2 model.Tag
	}{arg1, arg2})
	stub := fake.DeleteByIDStub
	fakeReturns := fake.deleteByIDReturns
	fake.recordInvocation("DeleteByID", []interface{}{arg1, arg2})
	fake.deleteByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTagRepository) DeleteByIDCallCount() int {
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	return len(fake.deleteByIDArgsForCall)
}

func (fake *FakeTagRepository) DeleteByIDCalls(stub func(context.Context, model.Tag) error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = stub
}

func (fake *FakeTagRepository) DeleteByIDArgsForCall(i int) (context.Context, model.Tag) {
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	argsForCall := fake.deleteByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagRepository) DeleteByIDReturns(result1 error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = nil
	fake.deleteByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTagRepository) DeleteByIDReturnsOnCall(i int, result1 error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = nil
	if fake.deleteByIDReturnsOnCall == nil {
		fake.deleteByIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteByIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTagRepository) FindAllByNames(arg1 context.Context, arg2 []string) ([]model.Tag, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.findAllByNamesMutex.Lock()
	ret, specificReturn := fake.findAllByNamesReturnsOnCall[len(fake.findAllByNamesArgsForCall)]
	fake.findAllByNamesArgsForCall = append(fake.findAllByNamesArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.FindAllByNamesStub
	fakeReturns := fake.findAllByNamesReturns
	fake.recordInvocation("FindAllByNames", []interface{}{arg1, arg2Copy})
	fake.findAllByNamesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTagRepository) FindAllByNamesCallCount() int {
	fake.findAllByNamesMutex.RLock()
	defer fake.findAllByNamesMutex.RUnlock()
	return len(fake.findAllByNamesArgsForCall)
}

func (fake *FakeTagRepository) FindAllByNamesCalls(stub func(context.Context, []string) ([]model.Tag, error)) {
	fake.findAllByNamesMutex.Lock()
	defer fake.findAllByNamesMutex.Unlock()
	fake.FindAllByNamesStub = stub
}

func (fake *FakeTagRepository) FindAllByNamesArgsForCall(i int) (context.Context, []string) {
	fake.findAllByNamesMutex.RLock()
	defer fake.findAllByNamesMutex.RUnlock()
	argsForCall := fake.findAllByNamesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagRepository) FindAllByNamesReturns(result1 []model.Tag, result2 error) {
	fake.findAllByNamesMutex.Lock()
	defer fake.findAllByNamesMutex.Unlock()
	fake.FindAllByNamesStub = nil
	fake.findAllByNamesReturns = struct {
		result1 []model.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) FindAllByNamesReturnsOnCall(i int, result1 []model.Tag, result2 error) {
	fake.findAllByNamesMutex.Lock()
	defer fake.findAllByNamesMutex.Unlock()
	fake.FindAllByNamesStub = nil
	if fake.findAllByNamesReturnsOnCall == nil {
		fake.findAllByNamesReturnsOnCall = make(map[int]struct {
			result1 []model.Tag
			result2 error
		})
	}
	fake.findAllByNamesReturnsOnCall[i] = struct {
		result1 []model.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) FindByID(arg1 context.Context, arg2 string) (model.Tag, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FindByIDStub
	fakeReturns := fake.findByIDReturns
	fake.recordInvocation("FindByID", []interface{}{arg1, arg2})
	fake.findByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTagRepository) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *FakeTagRepository) FindByIDCalls(stub func(context.Context, string) (model.Tag, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *FakeTagRepository) FindByIDArgsForCall(i int) (context.Context, string) {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagRepository) FindByIDReturns(result1 model.Tag, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 model.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) FindByIDReturnsOnCall(i int, result1 model.Tag, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 model.Tag
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 model.Tag
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) FindTagPopuler(arg1 context.Context, arg2 int64) ([]domain.FindTagPopulerResult, error) {
	fake.findTagPopulerMutex.Lock()
	ret, specificReturn := fake.findTagPopulerReturnsOnCall[len(fake.findTagPopulerArgsForCall)]
	fake.findTagPopulerArgsForCall = append(fake.findTagPopulerArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.FindTagPopulerStub
	fakeReturns := fake.findTagPopulerReturns
	fake.recordInvocation("FindTagPopuler", []interface{}{arg1, arg2})
	fake.findTagPopulerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTagRepository) FindTagPopulerCallCount() int {
	fake.findTagPopulerMutex.RLock()
	defer fake.findTagPopulerMutex.RUnlock()
	return len(fake.findTagPopulerArgsForCall)
}

func (fake *FakeTagRepository) FindTagPopulerCalls(stub func(context.Context, int64) ([]domain.FindTagPopulerResult, error)) {
	fake.findTagPopulerMutex.Lock()
	defer fake.findTagPopulerMutex.Unlock()
	fake.FindTagPopulerStub = stub
}

func (fake *FakeTagRepository) FindTagPopulerArgsForCall(i int) (context.Context, int64) {
	fake.findTagPopulerMutex.RLock()
	defer fake.findTagPopulerMutex.RUnlock()
	argsForCall := fake.findTagPopulerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagRepository) FindTagPopulerReturns(result1 []domain.FindTagPopulerResult, result2 error) {
	fake.findTagPopulerMutex.Lock()
	defer fake.findTagPopulerMutex.Unlock()
	fake.FindTagPopulerStub = nil
	fake.findTagPopulerReturns = struct {
		result1 []domain.FindTagPopulerResult
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) FindTagPopulerReturnsOnCall(i int, result1 []domain.FindTagPopulerResult, result2 error) {
	fake.findTagPopulerMutex.Lock()
	defer fake.findTagPopulerMutex.Unlock()
	fake.FindTagPopulerStub = nil
	if fake.findTagPopulerReturnsOnCall == nil {
		fake.findTagPopulerReturnsOnCall = make(map[int]struct {
			result1 []domain.FindTagPopulerResult
			result2 error
		})
	}
	fake.findTagPopulerReturnsOnCall[i] = struct {
		result1 []domain.FindTagPopulerResult
		result2 error
	}{result1, result2}
}

func (fake *FakeTagRepository) UpSertMany(arg1 context.Context, arg2 []string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.upSertManyMutex.Lock()
	ret, specificReturn := fake.upSertManyReturnsOnCall[len(fake.upSertManyArgsForCall)]
	fake.upSertManyArgsForCall = append(fake.upSertManyArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.UpSertManyStub
	fakeReturns := fake.upSertManyReturns
	fake.recordInvocation("UpSertMany", []interface{}{arg1, arg2Copy})
	fake.upSertManyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTagRepository) UpSertManyCallCount() int {
	fake.upSertManyMutex.RLock()
	defer fake.upSertManyMutex.RUnlock()
	return len(fake.upSertManyArgsForCall)
}

func (fake *FakeTagRepository) UpSertManyCalls(stub func(context.Context, []string) error) {
	fake.upSertManyMutex.Lock()
	defer fake.upSertManyMutex.Unlock()
	fake.UpSertManyStub = stub
}

func (fake *FakeTagRepository) UpSertManyArgsForCall(i int) (context.Context, []string) {
	fake.upSertManyMutex.RLock()
	defer fake.upSertManyMutex.RUnlock()
	argsForCall := fake.upSertManyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagRepository) UpSertManyReturns(result1 error) {
	fake.upSertManyMutex.Lock()
	defer fake.upSertManyMutex.Unlock()
	fake.UpSertManyStub = nil
	fake.upSertManyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTagRepository) UpSertManyReturnsOnCall(i int, result1 error) {
	fake.upSertManyMutex.Lock()
	defer fake.upSertManyMutex.Unlock()
	fake.UpSertManyStub = nil
	if fake.upSertManyReturnsOnCall == nil {
		fake.upSertManyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.upSertManyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTagRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	fake.findAllByNamesMutex.RLock()
	defer fake.findAllByNamesMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.findTagPopulerMutex.RLock()
	defer fake.findTagPopulerMutex.RUnlock()
	fake.upSertManyMutex.RLock()
	defer fake.upSertManyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTagRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.TagRepository = new(FakeTagRepository)
