// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"

	"github.com/SyaibanAhmadRamadhan/gocatch/ginfra/gdb"
)

type FakeUserRepository struct {
	CreateStub        func(context.Context, model.User) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 model.User
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	FindByOneColumnStub        func(context.Context, gdb.FindByOneColumnParam, ...string) (model.User, error)
	findByOneColumnMutex       sync.RWMutex
	findByOneColumnArgsForCall []struct {
		arg1 context.Context
		arg2 gdb.FindByOneColumnParam
		arg3 []string
	}
	findByOneColumnReturns struct {
		result1 model.User
		result2 error
	}
	findByOneColumnReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	UpdateByIDStub        func(context.Context, model.User, []string) error
	updateByIDMutex       sync.RWMutex
	updateByIDArgsForCall []struct {
		arg1 context.Context
		arg2 model.User
		arg3 []string
	}
	updateByIDReturns struct {
		result1 error
	}
	updateByIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) Create(arg1 context.Context, arg2 model.User) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 model.User
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUserRepository) CreateCalls(stub func(context.Context, model.User) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeUserRepository) CreateArgsForCall(i int) (context.Context, model.User) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) FindByOneColumn(arg1 context.Context, arg2 gdb.FindByOneColumnParam, arg3 ...string) (model.User, error) {
	fake.findByOneColumnMutex.Lock()
	ret, specificReturn := fake.findByOneColumnReturnsOnCall[len(fake.findByOneColumnArgsForCall)]
	fake.findByOneColumnArgsForCall = append(fake.findByOneColumnArgsForCall, struct {
		arg1 context.Context
		arg2 gdb.FindByOneColumnParam
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.FindByOneColumnStub
	fakeReturns := fake.findByOneColumnReturns
	fake.recordInvocation("FindByOneColumn", []interface{}{arg1, arg2, arg3})
	fake.findByOneColumnMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) FindByOneColumnCallCount() int {
	fake.findByOneColumnMutex.RLock()
	defer fake.findByOneColumnMutex.RUnlock()
	return len(fake.findByOneColumnArgsForCall)
}

func (fake *FakeUserRepository) FindByOneColumnCalls(stub func(context.Context, gdb.FindByOneColumnParam, ...string) (model.User, error)) {
	fake.findByOneColumnMutex.Lock()
	defer fake.findByOneColumnMutex.Unlock()
	fake.FindByOneColumnStub = stub
}

func (fake *FakeUserRepository) FindByOneColumnArgsForCall(i int) (context.Context, gdb.FindByOneColumnParam, []string) {
	fake.findByOneColumnMutex.RLock()
	defer fake.findByOneColumnMutex.RUnlock()
	argsForCall := fake.findByOneColumnArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) FindByOneColumnReturns(result1 model.User, result2 error) {
	fake.findByOneColumnMutex.Lock()
	defer fake.findByOneColumnMutex.Unlock()
	fake.FindByOneColumnStub = nil
	fake.findByOneColumnReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) FindByOneColumnReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.findByOneColumnMutex.Lock()
	defer fake.findByOneColumnMutex.Unlock()
	fake.FindByOneColumnStub = nil
	if fake.findByOneColumnReturnsOnCall == nil {
		fake.findByOneColumnReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.findByOneColumnReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) UpdateByID(arg1 context.Context, arg2 model.User, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.updateByIDMutex.Lock()
	ret, specificReturn := fake.updateByIDReturnsOnCall[len(fake.updateByIDArgsForCall)]
	fake.updateByIDArgsForCall = append(fake.updateByIDArgsForCall, struct {
		arg1 context.Context
		arg2 model.User
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.UpdateByIDStub
	fakeReturns := fake.updateByIDReturns
	fake.recordInvocation("UpdateByID", []interface{}{arg1, arg2, arg3Copy})
	fake.updateByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) UpdateByIDCallCount() int {
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	return len(fake.updateByIDArgsForCall)
}

func (fake *FakeUserRepository) UpdateByIDCalls(stub func(context.Context, model.User, []string) error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = stub
}

func (fake *FakeUserRepository) UpdateByIDArgsForCall(i int) (context.Context, model.User, []string) {
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	argsForCall := fake.updateByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) UpdateByIDReturns(result1 error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = nil
	fake.updateByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UpdateByIDReturnsOnCall(i int, result1 error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = nil
	if fake.updateByIDReturnsOnCall == nil {
		fake.updateByIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateByIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.findByOneColumnMutex.RLock()
	defer fake.findByOneColumnMutex.RUnlock()
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserRepository = new(FakeUserRepository)
