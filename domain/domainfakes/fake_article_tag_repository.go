// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeArticleTagRepository struct {
	DeleteByArticleIdStub        func(context.Context, string) error
	deleteByArticleIdMutex       sync.RWMutex
	deleteByArticleIdArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteByArticleIdReturns struct {
		result1 error
	}
	deleteByArticleIdReturnsOnCall map[int]struct {
		result1 error
	}
	ReplaceAllStub        func(context.Context, []model.ArticleTag) error
	replaceAllMutex       sync.RWMutex
	replaceAllArgsForCall []struct {
		arg1 context.Context
		arg2 []model.ArticleTag
	}
	replaceAllReturns struct {
		result1 error
	}
	replaceAllReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArticleTagRepository) DeleteByArticleId(arg1 context.Context, arg2 string) error {
	fake.deleteByArticleIdMutex.Lock()
	ret, specificReturn := fake.deleteByArticleIdReturnsOnCall[len(fake.deleteByArticleIdArgsForCall)]
	fake.deleteByArticleIdArgsForCall = append(fake.deleteByArticleIdArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteByArticleIdStub
	fakeReturns := fake.deleteByArticleIdReturns
	fake.recordInvocation("DeleteByArticleId", []interface{}{arg1, arg2})
	fake.deleteByArticleIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArticleTagRepository) DeleteByArticleIdCallCount() int {
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	return len(fake.deleteByArticleIdArgsForCall)
}

func (fake *FakeArticleTagRepository) DeleteByArticleIdCalls(stub func(context.Context, string) error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = stub
}

func (fake *FakeArticleTagRepository) DeleteByArticleIdArgsForCall(i int) (context.Context, string) {
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	argsForCall := fake.deleteByArticleIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArticleTagRepository) DeleteByArticleIdReturns(result1 error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = nil
	fake.deleteByArticleIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleTagRepository) DeleteByArticleIdReturnsOnCall(i int, result1 error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = nil
	if fake.deleteByArticleIdReturnsOnCall == nil {
		fake.deleteByArticleIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteByArticleIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleTagRepository) ReplaceAll(arg1 context.Context, arg2 []model.ArticleTag) error {
	var arg2Copy []model.ArticleTag
	if arg2 != nil {
		arg2Copy = make([]model.ArticleTag, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.replaceAllMutex.Lock()
	ret, specificReturn := fake.replaceAllReturnsOnCall[len(fake.replaceAllArgsForCall)]
	fake.replaceAllArgsForCall = append(fake.replaceAllArgsForCall, struct {
		arg1 context.Context
		arg2 []model.ArticleTag
	}{arg1, arg2Copy})
	stub := fake.ReplaceAllStub
	fakeReturns := fake.replaceAllReturns
	fake.recordInvocation("ReplaceAll", []interface{}{arg1, arg2Copy})
	fake.replaceAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArticleTagRepository) ReplaceAllCallCount() int {
	fake.replaceAllMutex.RLock()
	defer fake.replaceAllMutex.RUnlock()
	return len(fake.replaceAllArgsForCall)
}

func (fake *FakeArticleTagRepository) ReplaceAllCalls(stub func(context.Context, []model.ArticleTag) error) {
	fake.replaceAllMutex.Lock()
	defer fake.replaceAllMutex.Unlock()
	fake.ReplaceAllStub = stub
}

func (fake *FakeArticleTagRepository) ReplaceAllArgsForCall(i int) (context.Context, []model.ArticleTag) {
	fake.replaceAllMutex.RLock()
	defer fake.replaceAllMutex.RUnlock()
	argsForCall := fake.replaceAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArticleTagRepository) ReplaceAllReturns(result1 error) {
	fake.replaceAllMutex.Lock()
	defer fake.replaceAllMutex.Unlock()
	fake.ReplaceAllStub = nil
	fake.replaceAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleTagRepository) ReplaceAllReturnsOnCall(i int, result1 error) {
	fake.replaceAllMutex.Lock()
	defer fake.replaceAllMutex.Unlock()
	fake.ReplaceAllStub = nil
	if fake.replaceAllReturnsOnCall == nil {
		fake.replaceAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replaceAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleTagRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	fake.replaceAllMutex.RLock()
	defer fake.replaceAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArticleTagRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ArticleTagRepository = new(FakeArticleTagRepository)
