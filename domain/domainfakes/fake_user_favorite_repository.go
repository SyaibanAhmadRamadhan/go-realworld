// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeUserFavoriteRepository struct {
	DeleteOneByUserIdStub        func(context.Context, string, string) error
	deleteOneByUserIdMutex       sync.RWMutex
	deleteOneByUserIdArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteOneByUserIdReturns struct {
		result1 error
	}
	deleteOneByUserIdReturnsOnCall map[int]struct {
		result1 error
	}
	FindAllByUserIdStub        func(context.Context, domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error)
	findAllByUserIdMutex       sync.RWMutex
	findAllByUserIdArgsForCall []struct {
		arg1 context.Context
		arg2 domain.FindAllUserFavoriteParam
	}
	findAllByUserIdReturns struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	findAllByUserIdReturnsOnCall map[int]struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	UpSertByUserIdStub        func(context.Context, model.UserFavorite) error
	upSertByUserIdMutex       sync.RWMutex
	upSertByUserIdArgsForCall []struct {
		arg1 context.Context
		arg2 model.UserFavorite
	}
	upSertByUserIdReturns struct {
		result1 error
	}
	upSertByUserIdReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserId(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteOneByUserIdMutex.Lock()
	ret, specificReturn := fake.deleteOneByUserIdReturnsOnCall[len(fake.deleteOneByUserIdArgsForCall)]
	fake.deleteOneByUserIdArgsForCall = append(fake.deleteOneByUserIdArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteOneByUserIdStub
	fakeReturns := fake.deleteOneByUserIdReturns
	fake.recordInvocation("DeleteOneByUserId", []interface{}{arg1, arg2, arg3})
	fake.deleteOneByUserIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIdCallCount() int {
	fake.deleteOneByUserIdMutex.RLock()
	defer fake.deleteOneByUserIdMutex.RUnlock()
	return len(fake.deleteOneByUserIdArgsForCall)
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIdCalls(stub func(context.Context, string, string) error) {
	fake.deleteOneByUserIdMutex.Lock()
	defer fake.deleteOneByUserIdMutex.Unlock()
	fake.DeleteOneByUserIdStub = stub
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIdArgsForCall(i int) (context.Context, string, string) {
	fake.deleteOneByUserIdMutex.RLock()
	defer fake.deleteOneByUserIdMutex.RUnlock()
	argsForCall := fake.deleteOneByUserIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIdReturns(result1 error) {
	fake.deleteOneByUserIdMutex.Lock()
	defer fake.deleteOneByUserIdMutex.Unlock()
	fake.DeleteOneByUserIdStub = nil
	fake.deleteOneByUserIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIdReturnsOnCall(i int, result1 error) {
	fake.deleteOneByUserIdMutex.Lock()
	defer fake.deleteOneByUserIdMutex.Unlock()
	fake.DeleteOneByUserIdStub = nil
	if fake.deleteOneByUserIdReturnsOnCall == nil {
		fake.deleteOneByUserIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOneByUserIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) FindAllByUserId(arg1 context.Context, arg2 domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error) {
	fake.findAllByUserIdMutex.Lock()
	ret, specificReturn := fake.findAllByUserIdReturnsOnCall[len(fake.findAllByUserIdArgsForCall)]
	fake.findAllByUserIdArgsForCall = append(fake.findAllByUserIdArgsForCall, struct {
		arg1 context.Context
		arg2 domain.FindAllUserFavoriteParam
	}{arg1, arg2})
	stub := fake.FindAllByUserIdStub
	fakeReturns := fake.findAllByUserIdReturns
	fake.recordInvocation("FindAllByUserId", []interface{}{arg1, arg2})
	fake.findAllByUserIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIdCallCount() int {
	fake.findAllByUserIdMutex.RLock()
	defer fake.findAllByUserIdMutex.RUnlock()
	return len(fake.findAllByUserIdArgsForCall)
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIdCalls(stub func(context.Context, domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error)) {
	fake.findAllByUserIdMutex.Lock()
	defer fake.findAllByUserIdMutex.Unlock()
	fake.FindAllByUserIdStub = stub
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIdArgsForCall(i int) (context.Context, domain.FindAllUserFavoriteParam) {
	fake.findAllByUserIdMutex.RLock()
	defer fake.findAllByUserIdMutex.RUnlock()
	argsForCall := fake.findAllByUserIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIdReturns(result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllByUserIdMutex.Lock()
	defer fake.findAllByUserIdMutex.Unlock()
	fake.FindAllByUserIdStub = nil
	fake.findAllByUserIdReturns = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIdReturnsOnCall(i int, result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllByUserIdMutex.Lock()
	defer fake.findAllByUserIdMutex.Unlock()
	fake.FindAllByUserIdStub = nil
	if fake.findAllByUserIdReturnsOnCall == nil {
		fake.findAllByUserIdReturnsOnCall = make(map[int]struct {
			result1 domain.FindAllArticleResult
			result2 error
		})
	}
	fake.findAllByUserIdReturnsOnCall[i] = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeUserFavoriteRepository) UpSertByUserId(arg1 context.Context, arg2 model.UserFavorite) error {
	fake.upSertByUserIdMutex.Lock()
	ret, specificReturn := fake.upSertByUserIdReturnsOnCall[len(fake.upSertByUserIdArgsForCall)]
	fake.upSertByUserIdArgsForCall = append(fake.upSertByUserIdArgsForCall, struct {
		arg1 context.Context
		arg2 model.UserFavorite
	}{arg1, arg2})
	stub := fake.UpSertByUserIdStub
	fakeReturns := fake.upSertByUserIdReturns
	fake.recordInvocation("UpSertByUserId", []interface{}{arg1, arg2})
	fake.upSertByUserIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIdCallCount() int {
	fake.upSertByUserIdMutex.RLock()
	defer fake.upSertByUserIdMutex.RUnlock()
	return len(fake.upSertByUserIdArgsForCall)
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIdCalls(stub func(context.Context, model.UserFavorite) error) {
	fake.upSertByUserIdMutex.Lock()
	defer fake.upSertByUserIdMutex.Unlock()
	fake.UpSertByUserIdStub = stub
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIdArgsForCall(i int) (context.Context, model.UserFavorite) {
	fake.upSertByUserIdMutex.RLock()
	defer fake.upSertByUserIdMutex.RUnlock()
	argsForCall := fake.upSertByUserIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIdReturns(result1 error) {
	fake.upSertByUserIdMutex.Lock()
	defer fake.upSertByUserIdMutex.Unlock()
	fake.UpSertByUserIdStub = nil
	fake.upSertByUserIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIdReturnsOnCall(i int, result1 error) {
	fake.upSertByUserIdMutex.Lock()
	defer fake.upSertByUserIdMutex.Unlock()
	fake.UpSertByUserIdStub = nil
	if fake.upSertByUserIdReturnsOnCall == nil {
		fake.upSertByUserIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.upSertByUserIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteOneByUserIdMutex.RLock()
	defer fake.deleteOneByUserIdMutex.RUnlock()
	fake.findAllByUserIdMutex.RLock()
	defer fake.findAllByUserIdMutex.RUnlock()
	fake.upSertByUserIdMutex.RLock()
	defer fake.upSertByUserIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserFavoriteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserFavoriteRepository = new(FakeUserFavoriteRepository)
