// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeUserFavoriteRepository struct {
	DeleteOneByUserIDStub        func(context.Context, string, string) error
	deleteOneByUserIDMutex       sync.RWMutex
	deleteOneByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteOneByUserIDReturns struct {
		result1 error
	}
	deleteOneByUserIDReturnsOnCall map[int]struct {
		result1 error
	}
	FindAllByUserIDStub        func(context.Context, domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error)
	findAllByUserIDMutex       sync.RWMutex
	findAllByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 domain.FindAllUserFavoriteParam
	}
	findAllByUserIDReturns struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	findAllByUserIDReturnsOnCall map[int]struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	UpSertByUserIDStub        func(context.Context, model.UserFavorite) error
	upSertByUserIDMutex       sync.RWMutex
	upSertByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 model.UserFavorite
	}
	upSertByUserIDReturns struct {
		result1 error
	}
	upSertByUserIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserID(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteOneByUserIDMutex.Lock()
	ret, specificReturn := fake.deleteOneByUserIDReturnsOnCall[len(fake.deleteOneByUserIDArgsForCall)]
	fake.deleteOneByUserIDArgsForCall = append(fake.deleteOneByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteOneByUserIDStub
	fakeReturns := fake.deleteOneByUserIDReturns
	fake.recordInvocation("DeleteOneByUserID", []interface{}{arg1, arg2, arg3})
	fake.deleteOneByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIDCallCount() int {
	fake.deleteOneByUserIDMutex.RLock()
	defer fake.deleteOneByUserIDMutex.RUnlock()
	return len(fake.deleteOneByUserIDArgsForCall)
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIDCalls(stub func(context.Context, string, string) error) {
	fake.deleteOneByUserIDMutex.Lock()
	defer fake.deleteOneByUserIDMutex.Unlock()
	fake.DeleteOneByUserIDStub = stub
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIDArgsForCall(i int) (context.Context, string, string) {
	fake.deleteOneByUserIDMutex.RLock()
	defer fake.deleteOneByUserIDMutex.RUnlock()
	argsForCall := fake.deleteOneByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIDReturns(result1 error) {
	fake.deleteOneByUserIDMutex.Lock()
	defer fake.deleteOneByUserIDMutex.Unlock()
	fake.DeleteOneByUserIDStub = nil
	fake.deleteOneByUserIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) DeleteOneByUserIDReturnsOnCall(i int, result1 error) {
	fake.deleteOneByUserIDMutex.Lock()
	defer fake.deleteOneByUserIDMutex.Unlock()
	fake.DeleteOneByUserIDStub = nil
	if fake.deleteOneByUserIDReturnsOnCall == nil {
		fake.deleteOneByUserIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOneByUserIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) FindAllByUserID(arg1 context.Context, arg2 domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error) {
	fake.findAllByUserIDMutex.Lock()
	ret, specificReturn := fake.findAllByUserIDReturnsOnCall[len(fake.findAllByUserIDArgsForCall)]
	fake.findAllByUserIDArgsForCall = append(fake.findAllByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 domain.FindAllUserFavoriteParam
	}{arg1, arg2})
	stub := fake.FindAllByUserIDStub
	fakeReturns := fake.findAllByUserIDReturns
	fake.recordInvocation("FindAllByUserID", []interface{}{arg1, arg2})
	fake.findAllByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIDCallCount() int {
	fake.findAllByUserIDMutex.RLock()
	defer fake.findAllByUserIDMutex.RUnlock()
	return len(fake.findAllByUserIDArgsForCall)
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIDCalls(stub func(context.Context, domain.FindAllUserFavoriteParam) (domain.FindAllArticleResult, error)) {
	fake.findAllByUserIDMutex.Lock()
	defer fake.findAllByUserIDMutex.Unlock()
	fake.FindAllByUserIDStub = stub
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIDArgsForCall(i int) (context.Context, domain.FindAllUserFavoriteParam) {
	fake.findAllByUserIDMutex.RLock()
	defer fake.findAllByUserIDMutex.RUnlock()
	argsForCall := fake.findAllByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIDReturns(result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllByUserIDMutex.Lock()
	defer fake.findAllByUserIDMutex.Unlock()
	fake.FindAllByUserIDStub = nil
	fake.findAllByUserIDReturns = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeUserFavoriteRepository) FindAllByUserIDReturnsOnCall(i int, result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllByUserIDMutex.Lock()
	defer fake.findAllByUserIDMutex.Unlock()
	fake.FindAllByUserIDStub = nil
	if fake.findAllByUserIDReturnsOnCall == nil {
		fake.findAllByUserIDReturnsOnCall = make(map[int]struct {
			result1 domain.FindAllArticleResult
			result2 error
		})
	}
	fake.findAllByUserIDReturnsOnCall[i] = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeUserFavoriteRepository) UpSertByUserID(arg1 context.Context, arg2 model.UserFavorite) error {
	fake.upSertByUserIDMutex.Lock()
	ret, specificReturn := fake.upSertByUserIDReturnsOnCall[len(fake.upSertByUserIDArgsForCall)]
	fake.upSertByUserIDArgsForCall = append(fake.upSertByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 model.UserFavorite
	}{arg1, arg2})
	stub := fake.UpSertByUserIDStub
	fakeReturns := fake.upSertByUserIDReturns
	fake.recordInvocation("UpSertByUserID", []interface{}{arg1, arg2})
	fake.upSertByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIDCallCount() int {
	fake.upSertByUserIDMutex.RLock()
	defer fake.upSertByUserIDMutex.RUnlock()
	return len(fake.upSertByUserIDArgsForCall)
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIDCalls(stub func(context.Context, model.UserFavorite) error) {
	fake.upSertByUserIDMutex.Lock()
	defer fake.upSertByUserIDMutex.Unlock()
	fake.UpSertByUserIDStub = stub
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIDArgsForCall(i int) (context.Context, model.UserFavorite) {
	fake.upSertByUserIDMutex.RLock()
	defer fake.upSertByUserIDMutex.RUnlock()
	argsForCall := fake.upSertByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIDReturns(result1 error) {
	fake.upSertByUserIDMutex.Lock()
	defer fake.upSertByUserIDMutex.Unlock()
	fake.UpSertByUserIDStub = nil
	fake.upSertByUserIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) UpSertByUserIDReturnsOnCall(i int, result1 error) {
	fake.upSertByUserIDMutex.Lock()
	defer fake.upSertByUserIDMutex.Unlock()
	fake.UpSertByUserIDStub = nil
	if fake.upSertByUserIDReturnsOnCall == nil {
		fake.upSertByUserIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.upSertByUserIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserFavoriteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteOneByUserIDMutex.RLock()
	defer fake.deleteOneByUserIDMutex.RUnlock()
	fake.findAllByUserIDMutex.RLock()
	defer fake.findAllByUserIDMutex.RUnlock()
	fake.upSertByUserIDMutex.RLock()
	defer fake.upSertByUserIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserFavoriteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserFavoriteRepository = new(FakeUserFavoriteRepository)
