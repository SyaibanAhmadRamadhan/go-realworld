// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeArticleRepository struct {
	CreateStub        func(context.Context, model.Article) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 model.Article
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteByIDStub        func(context.Context, model.Article) error
	deleteByIDMutex       sync.RWMutex
	deleteByIDArgsForCall []struct {
		arg1 context.Context
		arg2 model.Article
	}
	deleteByIDReturns struct {
		result1 error
	}
	deleteByIDReturnsOnCall map[int]struct {
		result1 error
	}
	FindAllPaginateStub        func(context.Context, domain.FindAllPaginateArticleParam, ...string) (domain.FindAllArticleResult, error)
	findAllPaginateMutex       sync.RWMutex
	findAllPaginateArgsForCall []struct {
		arg1 context.Context
		arg2 domain.FindAllPaginateArticleParam
		arg3 []string
	}
	findAllPaginateReturns struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	findAllPaginateReturnsOnCall map[int]struct {
		result1 domain.FindAllArticleResult
		result2 error
	}
	FindOneByIDStub        func(context.Context, domain.FindOneByIDArticleParam, ...string) (domain.FindOneArticleResult, error)
	findOneByIDMutex       sync.RWMutex
	findOneByIDArgsForCall []struct {
		arg1 context.Context
		arg2 domain.FindOneByIDArticleParam
		arg3 []string
	}
	findOneByIDReturns struct {
		result1 domain.FindOneArticleResult
		result2 error
	}
	findOneByIDReturnsOnCall map[int]struct {
		result1 domain.FindOneArticleResult
		result2 error
	}
	UpdateByIDStub        func(context.Context, model.Article, []string) error
	updateByIDMutex       sync.RWMutex
	updateByIDArgsForCall []struct {
		arg1 context.Context
		arg2 model.Article
		arg3 []string
	}
	updateByIDReturns struct {
		result1 error
	}
	updateByIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArticleRepository) Create(arg1 context.Context, arg2 model.Article) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 model.Article
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArticleRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeArticleRepository) CreateCalls(stub func(context.Context, model.Article) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeArticleRepository) CreateArgsForCall(i int) (context.Context, model.Article) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArticleRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) DeleteByID(arg1 context.Context, arg2 model.Article) error {
	fake.deleteByIDMutex.Lock()
	ret, specificReturn := fake.deleteByIDReturnsOnCall[len(fake.deleteByIDArgsForCall)]
	fake.deleteByIDArgsForCall = append(fake.deleteByIDArgsForCall, struct {
		arg1 context.Context
		arg2 model.Article
	}{arg1, arg2})
	stub := fake.DeleteByIDStub
	fakeReturns := fake.deleteByIDReturns
	fake.recordInvocation("DeleteByID", []interface{}{arg1, arg2})
	fake.deleteByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArticleRepository) DeleteByIDCallCount() int {
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	return len(fake.deleteByIDArgsForCall)
}

func (fake *FakeArticleRepository) DeleteByIDCalls(stub func(context.Context, model.Article) error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = stub
}

func (fake *FakeArticleRepository) DeleteByIDArgsForCall(i int) (context.Context, model.Article) {
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	argsForCall := fake.deleteByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArticleRepository) DeleteByIDReturns(result1 error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = nil
	fake.deleteByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) DeleteByIDReturnsOnCall(i int, result1 error) {
	fake.deleteByIDMutex.Lock()
	defer fake.deleteByIDMutex.Unlock()
	fake.DeleteByIDStub = nil
	if fake.deleteByIDReturnsOnCall == nil {
		fake.deleteByIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteByIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) FindAllPaginate(arg1 context.Context, arg2 domain.FindAllPaginateArticleParam, arg3 ...string) (domain.FindAllArticleResult, error) {
	fake.findAllPaginateMutex.Lock()
	ret, specificReturn := fake.findAllPaginateReturnsOnCall[len(fake.findAllPaginateArgsForCall)]
	fake.findAllPaginateArgsForCall = append(fake.findAllPaginateArgsForCall, struct {
		arg1 context.Context
		arg2 domain.FindAllPaginateArticleParam
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.FindAllPaginateStub
	fakeReturns := fake.findAllPaginateReturns
	fake.recordInvocation("FindAllPaginate", []interface{}{arg1, arg2, arg3})
	fake.findAllPaginateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArticleRepository) FindAllPaginateCallCount() int {
	fake.findAllPaginateMutex.RLock()
	defer fake.findAllPaginateMutex.RUnlock()
	return len(fake.findAllPaginateArgsForCall)
}

func (fake *FakeArticleRepository) FindAllPaginateCalls(stub func(context.Context, domain.FindAllPaginateArticleParam, ...string) (domain.FindAllArticleResult, error)) {
	fake.findAllPaginateMutex.Lock()
	defer fake.findAllPaginateMutex.Unlock()
	fake.FindAllPaginateStub = stub
}

func (fake *FakeArticleRepository) FindAllPaginateArgsForCall(i int) (context.Context, domain.FindAllPaginateArticleParam, []string) {
	fake.findAllPaginateMutex.RLock()
	defer fake.findAllPaginateMutex.RUnlock()
	argsForCall := fake.findAllPaginateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArticleRepository) FindAllPaginateReturns(result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllPaginateMutex.Lock()
	defer fake.findAllPaginateMutex.Unlock()
	fake.FindAllPaginateStub = nil
	fake.findAllPaginateReturns = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeArticleRepository) FindAllPaginateReturnsOnCall(i int, result1 domain.FindAllArticleResult, result2 error) {
	fake.findAllPaginateMutex.Lock()
	defer fake.findAllPaginateMutex.Unlock()
	fake.FindAllPaginateStub = nil
	if fake.findAllPaginateReturnsOnCall == nil {
		fake.findAllPaginateReturnsOnCall = make(map[int]struct {
			result1 domain.FindAllArticleResult
			result2 error
		})
	}
	fake.findAllPaginateReturnsOnCall[i] = struct {
		result1 domain.FindAllArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeArticleRepository) FindOneByID(arg1 context.Context, arg2 domain.FindOneByIDArticleParam, arg3 ...string) (domain.FindOneArticleResult, error) {
	fake.findOneByIDMutex.Lock()
	ret, specificReturn := fake.findOneByIDReturnsOnCall[len(fake.findOneByIDArgsForCall)]
	fake.findOneByIDArgsForCall = append(fake.findOneByIDArgsForCall, struct {
		arg1 context.Context
		arg2 domain.FindOneByIDArticleParam
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.FindOneByIDStub
	fakeReturns := fake.findOneByIDReturns
	fake.recordInvocation("FindOneByID", []interface{}{arg1, arg2, arg3})
	fake.findOneByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArticleRepository) FindOneByIDCallCount() int {
	fake.findOneByIDMutex.RLock()
	defer fake.findOneByIDMutex.RUnlock()
	return len(fake.findOneByIDArgsForCall)
}

func (fake *FakeArticleRepository) FindOneByIDCalls(stub func(context.Context, domain.FindOneByIDArticleParam, ...string) (domain.FindOneArticleResult, error)) {
	fake.findOneByIDMutex.Lock()
	defer fake.findOneByIDMutex.Unlock()
	fake.FindOneByIDStub = stub
}

func (fake *FakeArticleRepository) FindOneByIDArgsForCall(i int) (context.Context, domain.FindOneByIDArticleParam, []string) {
	fake.findOneByIDMutex.RLock()
	defer fake.findOneByIDMutex.RUnlock()
	argsForCall := fake.findOneByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArticleRepository) FindOneByIDReturns(result1 domain.FindOneArticleResult, result2 error) {
	fake.findOneByIDMutex.Lock()
	defer fake.findOneByIDMutex.Unlock()
	fake.FindOneByIDStub = nil
	fake.findOneByIDReturns = struct {
		result1 domain.FindOneArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeArticleRepository) FindOneByIDReturnsOnCall(i int, result1 domain.FindOneArticleResult, result2 error) {
	fake.findOneByIDMutex.Lock()
	defer fake.findOneByIDMutex.Unlock()
	fake.FindOneByIDStub = nil
	if fake.findOneByIDReturnsOnCall == nil {
		fake.findOneByIDReturnsOnCall = make(map[int]struct {
			result1 domain.FindOneArticleResult
			result2 error
		})
	}
	fake.findOneByIDReturnsOnCall[i] = struct {
		result1 domain.FindOneArticleResult
		result2 error
	}{result1, result2}
}

func (fake *FakeArticleRepository) UpdateByID(arg1 context.Context, arg2 model.Article, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.updateByIDMutex.Lock()
	ret, specificReturn := fake.updateByIDReturnsOnCall[len(fake.updateByIDArgsForCall)]
	fake.updateByIDArgsForCall = append(fake.updateByIDArgsForCall, struct {
		arg1 context.Context
		arg2 model.Article
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.UpdateByIDStub
	fakeReturns := fake.updateByIDReturns
	fake.recordInvocation("UpdateByID", []interface{}{arg1, arg2, arg3Copy})
	fake.updateByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArticleRepository) UpdateByIDCallCount() int {
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	return len(fake.updateByIDArgsForCall)
}

func (fake *FakeArticleRepository) UpdateByIDCalls(stub func(context.Context, model.Article, []string) error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = stub
}

func (fake *FakeArticleRepository) UpdateByIDArgsForCall(i int) (context.Context, model.Article, []string) {
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	argsForCall := fake.updateByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArticleRepository) UpdateByIDReturns(result1 error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = nil
	fake.updateByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) UpdateByIDReturnsOnCall(i int, result1 error) {
	fake.updateByIDMutex.Lock()
	defer fake.updateByIDMutex.Unlock()
	fake.UpdateByIDStub = nil
	if fake.updateByIDReturnsOnCall == nil {
		fake.updateByIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateByIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArticleRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteByIDMutex.RLock()
	defer fake.deleteByIDMutex.RUnlock()
	fake.findAllPaginateMutex.RLock()
	defer fake.findAllPaginateMutex.RUnlock()
	fake.findOneByIDMutex.RLock()
	defer fake.findOneByIDMutex.RUnlock()
	fake.updateByIDMutex.RLock()
	defer fake.updateByIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArticleRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ArticleRepository = new(FakeArticleRepository)
