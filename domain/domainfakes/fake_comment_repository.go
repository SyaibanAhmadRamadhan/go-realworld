// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"context"
	"realworld-go/domain"
	"realworld-go/domain/model"
	"sync"
)

type FakeCommentRepository struct {
	CreateStub        func(context.Context, model.Comment) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 model.Comment
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteByArticleIdStub        func(context.Context, string) error
	deleteByArticleIdMutex       sync.RWMutex
	deleteByArticleIdArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteByArticleIdReturns struct {
		result1 error
	}
	deleteByArticleIdReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteByIdStub        func(context.Context, model.Comment) error
	deleteByIdMutex       sync.RWMutex
	deleteByIdArgsForCall []struct {
		arg1 context.Context
		arg2 model.Comment
	}
	deleteByIdReturns struct {
		result1 error
	}
	deleteByIdReturnsOnCall map[int]struct {
		result1 error
	}
	FindAllByArticleIdStub        func(context.Context, domain.FindAllCommentParam, ...string) ([]model.Comment, error)
	findAllByArticleIdMutex       sync.RWMutex
	findAllByArticleIdArgsForCall []struct {
		arg1 context.Context
		arg2 domain.FindAllCommentParam
		arg3 []string
	}
	findAllByArticleIdReturns struct {
		result1 []model.Comment
		result2 error
	}
	findAllByArticleIdReturnsOnCall map[int]struct {
		result1 []model.Comment
		result2 error
	}
	UpdateByIdStub        func(context.Context, model.Comment, ...string) error
	updateByIdMutex       sync.RWMutex
	updateByIdArgsForCall []struct {
		arg1 context.Context
		arg2 model.Comment
		arg3 []string
	}
	updateByIdReturns struct {
		result1 error
	}
	updateByIdReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommentRepository) Create(arg1 context.Context, arg2 model.Comment) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 model.Comment
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCommentRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCommentRepository) CreateCalls(stub func(context.Context, model.Comment) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCommentRepository) CreateArgsForCall(i int) (context.Context, model.Comment) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommentRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) DeleteByArticleId(arg1 context.Context, arg2 string) error {
	fake.deleteByArticleIdMutex.Lock()
	ret, specificReturn := fake.deleteByArticleIdReturnsOnCall[len(fake.deleteByArticleIdArgsForCall)]
	fake.deleteByArticleIdArgsForCall = append(fake.deleteByArticleIdArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteByArticleIdStub
	fakeReturns := fake.deleteByArticleIdReturns
	fake.recordInvocation("DeleteByArticleId", []interface{}{arg1, arg2})
	fake.deleteByArticleIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCommentRepository) DeleteByArticleIdCallCount() int {
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	return len(fake.deleteByArticleIdArgsForCall)
}

func (fake *FakeCommentRepository) DeleteByArticleIdCalls(stub func(context.Context, string) error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = stub
}

func (fake *FakeCommentRepository) DeleteByArticleIdArgsForCall(i int) (context.Context, string) {
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	argsForCall := fake.deleteByArticleIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommentRepository) DeleteByArticleIdReturns(result1 error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = nil
	fake.deleteByArticleIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) DeleteByArticleIdReturnsOnCall(i int, result1 error) {
	fake.deleteByArticleIdMutex.Lock()
	defer fake.deleteByArticleIdMutex.Unlock()
	fake.DeleteByArticleIdStub = nil
	if fake.deleteByArticleIdReturnsOnCall == nil {
		fake.deleteByArticleIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteByArticleIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) DeleteById(arg1 context.Context, arg2 model.Comment) error {
	fake.deleteByIdMutex.Lock()
	ret, specificReturn := fake.deleteByIdReturnsOnCall[len(fake.deleteByIdArgsForCall)]
	fake.deleteByIdArgsForCall = append(fake.deleteByIdArgsForCall, struct {
		arg1 context.Context
		arg2 model.Comment
	}{arg1, arg2})
	stub := fake.DeleteByIdStub
	fakeReturns := fake.deleteByIdReturns
	fake.recordInvocation("DeleteById", []interface{}{arg1, arg2})
	fake.deleteByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCommentRepository) DeleteByIdCallCount() int {
	fake.deleteByIdMutex.RLock()
	defer fake.deleteByIdMutex.RUnlock()
	return len(fake.deleteByIdArgsForCall)
}

func (fake *FakeCommentRepository) DeleteByIdCalls(stub func(context.Context, model.Comment) error) {
	fake.deleteByIdMutex.Lock()
	defer fake.deleteByIdMutex.Unlock()
	fake.DeleteByIdStub = stub
}

func (fake *FakeCommentRepository) DeleteByIdArgsForCall(i int) (context.Context, model.Comment) {
	fake.deleteByIdMutex.RLock()
	defer fake.deleteByIdMutex.RUnlock()
	argsForCall := fake.deleteByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommentRepository) DeleteByIdReturns(result1 error) {
	fake.deleteByIdMutex.Lock()
	defer fake.deleteByIdMutex.Unlock()
	fake.DeleteByIdStub = nil
	fake.deleteByIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) DeleteByIdReturnsOnCall(i int, result1 error) {
	fake.deleteByIdMutex.Lock()
	defer fake.deleteByIdMutex.Unlock()
	fake.DeleteByIdStub = nil
	if fake.deleteByIdReturnsOnCall == nil {
		fake.deleteByIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteByIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) FindAllByArticleId(arg1 context.Context, arg2 domain.FindAllCommentParam, arg3 ...string) ([]model.Comment, error) {
	fake.findAllByArticleIdMutex.Lock()
	ret, specificReturn := fake.findAllByArticleIdReturnsOnCall[len(fake.findAllByArticleIdArgsForCall)]
	fake.findAllByArticleIdArgsForCall = append(fake.findAllByArticleIdArgsForCall, struct {
		arg1 context.Context
		arg2 domain.FindAllCommentParam
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.FindAllByArticleIdStub
	fakeReturns := fake.findAllByArticleIdReturns
	fake.recordInvocation("FindAllByArticleId", []interface{}{arg1, arg2, arg3})
	fake.findAllByArticleIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommentRepository) FindAllByArticleIdCallCount() int {
	fake.findAllByArticleIdMutex.RLock()
	defer fake.findAllByArticleIdMutex.RUnlock()
	return len(fake.findAllByArticleIdArgsForCall)
}

func (fake *FakeCommentRepository) FindAllByArticleIdCalls(stub func(context.Context, domain.FindAllCommentParam, ...string) ([]model.Comment, error)) {
	fake.findAllByArticleIdMutex.Lock()
	defer fake.findAllByArticleIdMutex.Unlock()
	fake.FindAllByArticleIdStub = stub
}

func (fake *FakeCommentRepository) FindAllByArticleIdArgsForCall(i int) (context.Context, domain.FindAllCommentParam, []string) {
	fake.findAllByArticleIdMutex.RLock()
	defer fake.findAllByArticleIdMutex.RUnlock()
	argsForCall := fake.findAllByArticleIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommentRepository) FindAllByArticleIdReturns(result1 []model.Comment, result2 error) {
	fake.findAllByArticleIdMutex.Lock()
	defer fake.findAllByArticleIdMutex.Unlock()
	fake.FindAllByArticleIdStub = nil
	fake.findAllByArticleIdReturns = struct {
		result1 []model.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeCommentRepository) FindAllByArticleIdReturnsOnCall(i int, result1 []model.Comment, result2 error) {
	fake.findAllByArticleIdMutex.Lock()
	defer fake.findAllByArticleIdMutex.Unlock()
	fake.FindAllByArticleIdStub = nil
	if fake.findAllByArticleIdReturnsOnCall == nil {
		fake.findAllByArticleIdReturnsOnCall = make(map[int]struct {
			result1 []model.Comment
			result2 error
		})
	}
	fake.findAllByArticleIdReturnsOnCall[i] = struct {
		result1 []model.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeCommentRepository) UpdateById(arg1 context.Context, arg2 model.Comment, arg3 ...string) error {
	fake.updateByIdMutex.Lock()
	ret, specificReturn := fake.updateByIdReturnsOnCall[len(fake.updateByIdArgsForCall)]
	fake.updateByIdArgsForCall = append(fake.updateByIdArgsForCall, struct {
		arg1 context.Context
		arg2 model.Comment
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.UpdateByIdStub
	fakeReturns := fake.updateByIdReturns
	fake.recordInvocation("UpdateById", []interface{}{arg1, arg2, arg3})
	fake.updateByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCommentRepository) UpdateByIdCallCount() int {
	fake.updateByIdMutex.RLock()
	defer fake.updateByIdMutex.RUnlock()
	return len(fake.updateByIdArgsForCall)
}

func (fake *FakeCommentRepository) UpdateByIdCalls(stub func(context.Context, model.Comment, ...string) error) {
	fake.updateByIdMutex.Lock()
	defer fake.updateByIdMutex.Unlock()
	fake.UpdateByIdStub = stub
}

func (fake *FakeCommentRepository) UpdateByIdArgsForCall(i int) (context.Context, model.Comment, []string) {
	fake.updateByIdMutex.RLock()
	defer fake.updateByIdMutex.RUnlock()
	argsForCall := fake.updateByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommentRepository) UpdateByIdReturns(result1 error) {
	fake.updateByIdMutex.Lock()
	defer fake.updateByIdMutex.Unlock()
	fake.UpdateByIdStub = nil
	fake.updateByIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) UpdateByIdReturnsOnCall(i int, result1 error) {
	fake.updateByIdMutex.Lock()
	defer fake.updateByIdMutex.Unlock()
	fake.UpdateByIdStub = nil
	if fake.updateByIdReturnsOnCall == nil {
		fake.updateByIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateByIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommentRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteByArticleIdMutex.RLock()
	defer fake.deleteByArticleIdMutex.RUnlock()
	fake.deleteByIdMutex.RLock()
	defer fake.deleteByIdMutex.RUnlock()
	fake.findAllByArticleIdMutex.RLock()
	defer fake.findAllByArticleIdMutex.RUnlock()
	fake.updateByIdMutex.RLock()
	defer fake.updateByIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommentRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.CommentRepository = new(FakeCommentRepository)
